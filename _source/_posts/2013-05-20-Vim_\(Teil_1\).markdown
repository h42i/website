---
layout: post
title: Vim (Teil 1)
category: blog
tags:
- Code
---
# Überblick und Installation

__Editing at the speed of thought__


_(behauptet zumindest dieses Buch -> [Practical Vim](http://pragprog.com/book/dnvim/practical-vim))_

<!-- break -->

## Allgemeines

__Vim__ _(Vi-IMproved)_ ist, wie schon am Namen zu erkennen, eine Weiterentwicklung von __vi__, einem Open-Source Texteditor für Terminals. Beide Editoren basieren auf einem modularen Konzept, d.h. für verschiedenen Aufgaben/Aktionen kann zwischen 3(vi) bzw. 12(vim) Modi gewechselt werden, wodurch weniger Tastenkombinationen nötig sind.  

*__Anmerkung:__ Auch, wenn viele Befehle abwärtskompatiebel sind, beziehe ich mich im Folgenden auf die modernere Version des Editors (vim)*

## Warum vim?  

Obwohl __vim__ auf den ersten Blick sehr abschreckend wirken kann, gibt es nur wenige Editoren die in Effizienz und Geschwindigkeit vergleichbar sind (wenn man erst einmal die Grundlagen verstanden hat).

### Nachteile  

* Was ist denn ein Terminal?
* Igitt, komische Tastenkombinationen!
* Warum brauche ich 12 Modi um einen Text zu schreiben?

### Vorteile  

* Auf den meisten (UNIX basierten) Betriebssystemen ist __vim__ oder __vi__ schon installiert
* Alle Funktionen sind ohne Maus(tasten) zugänglich und können so auch über eine ssh-Verbindung verwendet werden.
* schnell und effizient
* durch Plugins erweiterbar
* Open-Source und kostenlos

## Installation  

Wenn __vim__ noch nicht installiert ist kann dies mit dem jeweiligen Paketmanager nachholt werden.  
`apt-get install vim` (Ubuntu)  
`pacman -S vim` (Arch-Linux)  
`brew install vim` (MacOS, benötigt [brew](http://mxcl.github.io/homebrew/))

Im Zweifelsfall (und Windowsnutzern) hilft Google weiter ;)


## Und jetzt?  

In den Folgenden Teilen werde ich auf die verschiedenen Modi und Befehle eingehen,
bis der Editor zu einer direkten verlängerung meines Gehirns geworden ist oder, was wahrscheinlicher ist,
ich aufgebe und nur noch Sublime Text benutze.
